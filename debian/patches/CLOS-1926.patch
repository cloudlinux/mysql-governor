diff -rupN a/src/dbtop_server.c b/src/dbtop_server.c
--- a/src/dbtop_server.c	2023-10-23 11:42:14.707845416 +0300
+++ b/src/dbtop_server.c	2023-11-29 11:19:07.272784366 +0200
@@ -246,6 +246,30 @@ renew_map_on_request (void *data)
   return NULL;
 }
 
+/* NOTE:
+   Modifying a GHashTable while iterating over it can lead to undefined behavior.
+   More safe and common approach to mitigate this issue is to create a snapshot of
+   the keys and then iterate over this snapshot to make the necessary modifications.
+ */
+static void
+dbctl_restrict_set_safe(GHashTable *accounts_hash, DbCtlCommand *command)
+{
+    GList *keys, *iterator;
+    gpointer key;
+
+    lock_acc();
+    keys = g_hash_table_get_keys(accounts_hash);
+
+    for (iterator = keys; iterator; iterator = iterator->next)
+    {
+        key = iterator->data;
+        dbctl_restrict_set(key, g_hash_table_lookup(accounts_hash, key), command);
+    }
+
+    unlock_acc();
+    g_list_free(keys);
+}
+
 void *
 run_dbctl_command (void *data)
 {
@@ -278,10 +302,9 @@ run_dbctl_command (void *data)
 	      close (ns);
 	      return NULL;	//lve use=all or off
 	    }
-	  lock_acc ();
-	  g_hash_table_foreach ((GHashTable *) get_accounts (),
-				(GHFunc) dbctl_restrict_set, &command);
-	  unlock_acc ();
+
+	  GHashTable *accounts = get_accounts();
+	  dbctl_restrict_set_safe(accounts, &command);
 	}
     }
   else if (command.command == UNRESTRICT)
@@ -349,7 +372,8 @@ run_dbctl_command (void *data)
 	  flag_need_to_renew_dbmap = 1;
   }
 
-  close (ns);
+  if (ns >= 0)
+    close (ns);
 
   return NULL;
 }
diff -rupN a/src/shared_memory.c b/src/shared_memory.c
--- a/src/shared_memory.c	2023-11-29 10:59:30.441287403 +0200
+++ b/src/shared_memory.c	2023-11-29 11:22:12.865510475 +0200
@@ -77,7 +77,7 @@ typedef struct __shm_structure {
 } shm_structure;
 
 shm_structure *bad_list = NULL;
-int shm_fd = 0;
+int shm_fd = -1;
 
 int init_bad_users_list_utility(void) {
 
@@ -89,6 +89,7 @@ int init_bad_users_list_utility(void) {
 			(PROT_READ | PROT_WRITE), MAP_SHARED,
 			shm_fd, 0)) == MAP_FAILED) {
 		close(shm_fd);
+		shm_fd = -1;
 		return -1;
 	}
 
@@ -105,7 +106,12 @@ int remove_bad_users_list_utility(void)
 	{
 		cl_munmap ((void *) bad_list, sizeof (shm_structure));
 	}
-	close(shm_fd);
+
+	if (shm_fd >= 0)
+	{
+		close(shm_fd);
+		shm_fd = -1;
+	}
 	return 0;
 }
 
@@ -176,11 +182,13 @@ int init_bad_users_list(void) {
 
 	if (first)
 	{
-		rc = ftruncate(shm_fd, sizeof(shm_structure));
-		if (rc)
-		{
-			WRITE_LOG (NULL, 0, "truncate(%s, %u) failed with %d code - IGNORING",
+		if (ftruncate(shm_fd, sizeof(shm_structure)) == -1) {
+			WRITE_LOG (NULL, 0, "truncate(%s, %u) failed with %d code - EXITING",
 					data_cfg.log_mode, shared_memory_name, (unsigned)sizeof(shm_structure), errno);
+			close(shm_fd);
+			shm_fd = -1;
+			umask(old_umask);
+			return -1;
 		}
 	}
 
@@ -191,6 +199,7 @@ int init_bad_users_list(void) {
 		WRITE_LOG (NULL, 0, "cl_map(%s) failed with %d code - EXITING",
 				data_cfg.log_mode, shared_memory_name, errno);
 		close(shm_fd);
+		shm_fd = -1;
 		umask(old_umask);
 		return -1;
 	}
@@ -203,6 +212,7 @@ int init_bad_users_list(void) {
 					data_cfg.log_mode, shared_memory_name, errno);
 			cl_munmap ((void *) bad_list, sizeof (shm_structure));
 			close(shm_fd);
+			shm_fd = -1;
 			umask(old_umask);
 			return -1;
 		}
@@ -238,7 +248,14 @@ int remove_bad_users_list(void) {
 	{
 		cl_munmap ((void *) bad_list, sizeof (shm_structure));
 	}
-	close(shm_fd);
+
+	if (shm_fd >= 0)
+	{
+		close(shm_fd);
+		shm_fd = -1;
+	}
+
+	bad_list = NULL;
 	return 0;
 }
 
@@ -247,7 +264,7 @@ int is_user_in_list(const char *username
 		return -1;
 	long index;
 	for (index = 0; index < bad_list->numbers; index++) {
-		if (!strncmp(bad_list->items[index].username, username, USERNAMEMAXLEN))
+		if (!strncmp(bad_list->items[index].username, username, USERNAMEMAXLEN - 1))
 			return 1;
 	}
 	return 0;
@@ -257,24 +274,30 @@ int is_user_in_list(const char *username
 int add_user_to_list(const char *username, int is_all) {
 	if (!bad_list || (bad_list == MAP_FAILED))
 		return -1;
+
+	// First check if the user is already in the list
+	// before any locks and heavy operation on the map
+	if (is_user_in_list(username)) return 0;
+
 	int uid = BAD_LVE;
 	if (lock_read_map() == 0) {
 		uid = get_uid(username);
 		unlock_rdwr_map();
 	}
+
 	if (is_all && uid == BAD_LVE) {
 		uid = 0;
 	}
-	if (!is_user_in_list(username)) {
-		if ((bad_list->numbers + 1) == MAX_ITEMS_IN_TABLE)
-			return -2;
-		if (sem_wait(&bad_list->sem) == 0) {
-			strlcpy(bad_list->items[bad_list->numbers].username, username,
-			USERNAMEMAXLEN);
-			bad_list->items[bad_list->numbers++].uid = uid;
-			sem_post(&bad_list->sem);
-		}
+
+	if ((bad_list->numbers + 1) == MAX_ITEMS_IN_TABLE)
+		return -2;
+
+	if (sem_wait(&bad_list->sem) == 0) {
+		strlcpy(bad_list->items[bad_list->numbers].username, username, USERNAMEMAXLEN);
+		bad_list->items[bad_list->numbers++].uid = uid;
+		sem_post(&bad_list->sem);
 	}
+
 	return 0;
 }
 #endif
@@ -284,7 +307,7 @@ int delete_user_from_list(char *username
 		return -1;
 	long index;
 	for (index = 0; index < bad_list->numbers; index++) {
-		if (!strncmp(bad_list->items[index].username, username, USERNAMEMAXLEN)) {
+		if (!strncmp(bad_list->items[index].username, username, USERNAMEMAXLEN - 1)) {
 			if (sem_wait(&bad_list->sem) == 0) {
 				if (index == (bad_list->numbers - 1)) {
 					bad_list->numbers--;
@@ -420,6 +443,10 @@ int user_in_bad_list_cleint_show(void) {
 			} else {
 				if (errno == EAGAIN) {
 					trys++;
+
+					if (trys == 400) {
+						break;
+					}
 				} else {
 					trys = 0;
 				}
@@ -433,7 +460,7 @@ int user_in_bad_list_cleint_show(void) {
 	return fnd;
 }
 
-int shm_fd_clents_global = 0;
+int shm_fd_clents_global = -1;
 shm_structure *bad_list_clents_global = NULL;
 pthread_mutex_t mtx_shared = PTHREAD_MUTEX_INITIALIZER;
 
@@ -465,6 +492,7 @@ int init_bad_users_list_client(void) {
 	if (bad_list_clents_global == MAP_FAILED)
 	{
 		close(shm_fd_clents_global);
+		shm_fd_clents_global = -1;
 		pthread_mutex_unlock(&mtx_shared);
 		umask(old_umask);
 		return -2;
@@ -478,6 +506,7 @@ int init_bad_users_list_client(void) {
 			cl_munmap ((void *) bad_list_clents_global, sizeof (shm_structure));
 			bad_list_clents_global = NULL;
 			close(shm_fd_clents_global);
+			shm_fd_clents_global = -1;
 			pthread_mutex_unlock(&mtx_shared);
 			return -2;
 		}
@@ -526,7 +555,13 @@ int remove_bad_users_list_client(void) {
 	pthread_mutex_lock(&mtx_shared);
 	if (bad_list_clents_global && (bad_list_clents_global != MAP_FAILED))
 		cl_munmap ((void *) bad_list_clents_global, sizeof (shm_structure));
-	close(shm_fd_clents_global);
+
+	if (shm_fd_clents_global >= 0)
+	{
+		close(shm_fd_clents_global);
+		shm_fd_clents_global = -1;
+	}
+
 	pthread_mutex_unlock(&mtx_shared);
 	return 0;
 }
